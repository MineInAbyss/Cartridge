From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boy <sivertpaulsen2@gmail.com>
Date: Thu, 17 Oct 2024 12:16:04 +0200
Subject: [PATCH] Disable unwanted Allay logic


diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index ec4b1f58a01677a931cbadd5b5d9cf7779394d60..050eb8142289a1563c9d32257f27daad522707fd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -24,6 +24,7 @@ import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.RegistryOps;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -88,10 +89,10 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.NEAREST_ITEMS);
     protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.PATH, MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.HURT_BY, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.LIKED_PLAYER, MemoryModuleType.LIKED_NOTEBLOCK_POSITION, MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.IS_PANICKING, new MemoryModuleType[0]);
     public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(0.5625F, 0.625F, 0.75F, 0.9375F, 1.0F, 1.0F, 1.125F, 1.25F, 1.5F, 1.875F, 2.0F, 2.25F, new Float[]{2.5F, 3.0F, 3.75F, 4.0F});
-    private final DynamicGameEventListener<VibrationSystem.Listener> dynamicVibrationListener;
+    //private final DynamicGameEventListener<VibrationSystem.Listener> dynamicVibrationListener; // Cartridge - disable unwanted allay logic
     private VibrationSystem.Data vibrationData;
     private final VibrationSystem.User vibrationUser;
-    private final DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener;
+    //private final DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener; // Cartridge - disable unwanted allay logic
     private final SimpleContainer inventory = new SimpleContainer(1);
     @Nullable
     public BlockPos jukeboxPos;
@@ -119,11 +120,13 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
             }
         };
         // Purpur end
-        this.setCanPickUpLoot(this.canPickUpLoot());
+        this.setCanPickUpLoot(false); // Cartridge - disable unwanted allay logic
         this.vibrationUser = new Allay.VibrationUser();
         this.vibrationData = new VibrationSystem.Data();
-        this.dynamicVibrationListener = new DynamicGameEventListener<>(new VibrationSystem.Listener(this));
-        this.dynamicJukeboxListener = new DynamicGameEventListener<>(new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), ((GameEvent) GameEvent.JUKEBOX_PLAY.value()).notificationRadius()));
+        // Cartridge end - disable unwanted allay logic
+        //this.dynamicVibrationListener = new DynamicGameEventListener<>(new VibrationSystem.Listener(this));
+        //this.dynamicJukeboxListener = new DynamicGameEventListener<>(new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), ((GameEvent) GameEvent.JUKEBOX_PLAY.value()).notificationRadius()));
+        // Cartridge end - disable unwanted allay logic
     }
 
     // CraftBukkit start
@@ -205,7 +208,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
         super.defineSynchedData(builder);
         builder.define(Allay.DATA_DANCING, false);
-        builder.define(Allay.DATA_CAN_DUPLICATE, true);
+        builder.define(Allay.DATA_CAN_DUPLICATE, false); // Cartridge - disable unwanted allay logic
     }
 
     @Override
@@ -282,14 +285,16 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     @Override
     public void aiStep() {
         super.aiStep();
-        if (!this.level().isClientSide && this.isAlive() && this.tickCount % 10 == 0) {
-            this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
-        }
+        // Cartridge start - disable unwanted allay logic
+        //if (!this.level().isClientSide && this.isAlive() && this.tickCount % 10 == 0) {
+        //    this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
+        //}
 
-        if (this.isDancing() && this.shouldStopDancing() && this.tickCount % 20 == 0) {
-            this.setDancing(false);
-            this.jukeboxPos = null;
-        }
+        //if (this.isDancing() && this.shouldStopDancing() && this.tickCount % 20 == 0) {
+        //    this.setDancing(false);
+        //    this.jukeboxPos = null;
+        //}
+        // Cartridge end - disable unwanted allay logic
 
         this.updateDuplicationCooldown();
     }
@@ -321,7 +326,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
                 this.spinningAnimationTicks0 = 0.0F;
             }
         } else {
-            VibrationSystem.Ticker.tick(this.level(), this.vibrationData, this.vibrationUser);
+            //VibrationSystem.Ticker.tick(this.level(), this.vibrationData, this.vibrationUser); // Cartridge - disable unwanted allay logic
             if (this.isPanicking()) {
                 this.setDancing(false);
             }
@@ -331,7 +336,8 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
     @Override
     public boolean canPickUpLoot() {
-        return !this.isOnPickupCooldown() && this.hasItemInHand();
+        //return !this.isOnPickupCooldown() && this.hasItemInHand();
+        return false; // Cartridge - disable unwanted allay logic
     }
 
     public boolean hasItemInHand() {
@@ -347,6 +353,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return this.getBrain().checkMemory(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryStatus.VALUE_PRESENT);
     }
 
+    // Cartridge start - disable unwanted allay logic
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
         ItemStack itemstack = player.getItemInHand(hand);
@@ -354,45 +361,53 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
         if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
             // CraftBukkit start - handle cancel duplication
-            Allay allay = this.duplicateAllay();
-            if (allay == null) {
-                return InteractionResult.SUCCESS;
-            }
+            //Allay allay = this.duplicateAllay();
+            //if (allay == null) {
+            //    return InteractionResult.SUCCESS;
+            //}
             // CraftBukkit end
-            this.level().broadcastEntityEvent(this, (byte) 18);
-            this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.removeInteractionItem(player, itemstack);
-            return InteractionResult.SUCCESS;
+            //this.level().broadcastEntityEvent(this, (byte) 18);
+            //this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            //this.removeInteractionItem(player, itemstack);
+            player.containerMenu.sendAllDataToRemote();
+            this.resendPossiblyDesyncedEntityData((ServerPlayer) player);
+            return InteractionResult.FAIL;
         } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
-            ItemStack itemstack2 = itemstack.copyWithCount(1);
-
-            this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
-            this.removeInteractionItem(player, itemstack);
-            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
-            return InteractionResult.SUCCESS;
+            //ItemStack itemstack2 = itemstack.copyWithCount(1);
+
+            //this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
+            //this.removeInteractionItem(player, itemstack);
+            //this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            //this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
+            player.containerMenu.sendAllDataToRemote();
+            this.resendPossiblyDesyncedEntityData((ServerPlayer) player);
+            return InteractionResult.FAIL;
         } else if (!itemstack1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.swing(InteractionHand.MAIN_HAND);
-            Iterator iterator = this.getInventory().removeAllItems().iterator();
-
-            while (iterator.hasNext()) {
-                ItemStack itemstack3 = (ItemStack) iterator.next();
-
-                BehaviorUtils.throwItem(this, itemstack3, this.position());
-            }
-
-            this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
-            player.addItem(itemstack1);
-            return InteractionResult.SUCCESS;
+            //this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
+            //this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            //this.swing(InteractionHand.MAIN_HAND);
+            //Iterator iterator = this.getInventory().removeAllItems().iterator();
+
+            //while (iterator.hasNext()) {
+            //    ItemStack itemstack3 = (ItemStack) iterator.next();
+
+            //    BehaviorUtils.throwItem(this, itemstack3, this.position());
+            //}
+
+            //this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
+            //player.addItem(itemstack1);
+            player.containerMenu.sendAllDataToRemote();
+            this.resendPossiblyDesyncedEntityData((ServerPlayer) player);
+            return InteractionResult.FAIL;
         } else {
             return super.mobInteract(player, hand);
         }
     }
+    // Cartridge start - disable unwanted allay logic
 
     public void setJukeboxPlaying(BlockPos jukeboxPos, boolean playing) {
-        if (playing) {
+        // Cartridge start - disable unwanted allay logic
+        /*if (playing) {
             if (!this.isDancing()) {
                 this.jukeboxPos = jukeboxPos;
                 this.setDancing(true);
@@ -400,8 +415,8 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         } else if (jukeboxPos.equals(this.jukeboxPos) || this.jukeboxPos == null) {
             this.jukeboxPos = null;
             this.setDancing(false);
-        }
-
+        }*/
+        // Cartridge end - disable unwanted allay logic
     }
 
     @Override
@@ -416,9 +431,12 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
     @Override
     public boolean wantsToPickUp(ItemStack stack) {
-        ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+        // Cartridge start - disable unwanted allay logic
+        //ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
 
-        return !itemstack1.isEmpty() && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.inventory.canAddItem(stack) && this.allayConsidersItemEqual(itemstack1, stack);
+        //return !itemstack1.isEmpty() && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.inventory.canAddItem(stack) && this.allayConsidersItemEqual(itemstack1, stack);
+        return false;
+        // Cartridge end - disable unwanted allay logic
     }
 
     private boolean allayConsidersItemEqual(ItemStack stack, ItemStack stack2) {
@@ -434,7 +452,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
     @Override
     protected void pickUpItem(ItemEntity item) {
-        InventoryCarrier.pickUpItem(this, this, item);
+        //InventoryCarrier.pickUpItem(this, this, item); // Cartridge - disable unwanted allay logic
     }
 
     @Override
@@ -448,7 +466,8 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return !this.onGround();
     }
 
-    @Override
+    // Cartridge start - disable unwanted allay logic
+    /*@Override
     public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> callback) {
         Level world = this.level();
 
@@ -457,21 +476,27 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
             callback.accept(this.dynamicJukeboxListener, worldserver);
         }
 
-    }
+    }*/
+    // Cartridge end - disable unwanted allay logic
 
     public boolean isDancing() {
         return (Boolean) this.entityData.get(Allay.DATA_DANCING);
     }
 
     public void setDancing(boolean dancing) {
-        if (!this.level().isClientSide && this.isEffectiveAi() && (!dancing || !this.isPanicking())) {
-            this.entityData.set(Allay.DATA_DANCING, dancing);
-        }
+        // Cartridge start - disable unwanted allay logic
+        //if (!this.level().isClientSide && this.isEffectiveAi() && (!dancing || !this.isPanicking())) {
+        //    this.entityData.set(Allay.DATA_DANCING, dancing);
+        //}
+        // Cartridge end - disable unwanted allay logic
     }
 
     private boolean shouldStopDancing() {
-        if (this.forceDancing) {return false;} // CraftBukkit
-        return this.jukeboxPos == null || !this.jukeboxPos.closerToCenterThan(this.position(), (double) ((GameEvent) GameEvent.JUKEBOX_PLAY.value()).notificationRadius()) || !this.level().getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
+        // Cartridge start - disable unwanted allay logic
+        //if (this.forceDancing) {return false;} // CraftBukkit
+        //return this.jukeboxPos == null || !this.jukeboxPos.closerToCenterThan(this.position(), (double) ((GameEvent) GameEvent.JUKEBOX_PLAY.value()).notificationRadius()) || !this.level().getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
+        return true;
+        // Cartridge end - disable unwanted allay logic
     }
 
     public float getHoldingItemAnimationProgress(float f) {
@@ -565,16 +590,19 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     }
 
     public Allay duplicateAllay() { // CraftBukkit - return allay
-        Allay allay = (Allay) EntityType.ALLAY.create(this.level());
-
-        if (allay != null) {
-            allay.moveTo(this.position());
-            allay.setPersistenceRequired();
-            allay.resetDuplicationCooldown();
-            this.resetDuplicationCooldown();
-            this.level().addFreshEntity(allay, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DUPLICATION); // CraftBukkit - reason for duplicated allay
-        }
-        return allay; // CraftBukkit
+        // Cartridge start - disable unwanted allay logic
+        //Allay allay = (Allay) EntityType.ALLAY.create(this.level());
+
+        //if (allay != null) {
+        //    allay.moveTo(this.position());
+        //    allay.setPersistenceRequired();
+        //    allay.resetDuplicationCooldown();
+        //    this.resetDuplicationCooldown();
+        //    this.level().addFreshEntity(allay, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DUPLICATION); // CraftBukkit - reason for duplicated allay
+        //}
+        //return allay; // CraftBukkit
+        return null;
+        // Cartridge end - disable unwanted allay logic
     }
 
     public void resetDuplicationCooldown() {
@@ -583,11 +611,12 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     }
 
     public boolean canDuplicate() {
-        return (Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE);
+        //return (Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE);
+        return false; // Cartridge - disable unwanted allay logic
     }
 
     private void removeInteractionItem(Player player, ItemStack stack) {
-        stack.consume(1, player);
+        //stack.consume(1, player); // Cartridge - disable unwanted allay logic
     }
 
     @Override
@@ -597,13 +626,16 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
     @Override
     public void handleEntityEvent(byte status) {
-        if (status == 18) {
+        // Cartridge start - disable unwanted allay logic
+        /*if (status == 18) {
             for (int i = 0; i < 3; ++i) {
                 this.spawnHeartParticle();
             }
         } else {
             super.handleEntityEvent(status);
-        }
+        }*/
+        super.handleEntityEvent(status);
+        // Cartridge end - disable unwanted allay logic
 
     }
 
@@ -673,37 +705,39 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         }
     }
 
-    private class JukeboxListener implements GameEventListener {
-
-        private final PositionSource listenerSource;
-        private final int listenerRadius;
-
-        public JukeboxListener(final PositionSource positionsource, final int i) {
-            this.listenerSource = positionsource;
-            this.listenerRadius = i;
-        }
-
-        @Override
-        public PositionSource getListenerSource() {
-            return this.listenerSource;
-        }
-
-        @Override
-        public int getListenerRadius() {
-            return this.listenerRadius;
-        }
-
-        @Override
-        public boolean handleGameEvent(ServerLevel world, Holder<GameEvent> event, GameEvent.Context emitter, Vec3 emitterPos) {
-            if (event.is((Holder) GameEvent.JUKEBOX_PLAY)) {
-                Allay.this.setJukeboxPlaying(BlockPos.containing(emitterPos), true);
-                return true;
-            } else if (event.is((Holder) GameEvent.JUKEBOX_STOP_PLAY)) {
-                Allay.this.setJukeboxPlaying(BlockPos.containing(emitterPos), false);
-                return true;
-            } else {
-                return false;
-            }
-        }
-    }
+//    private class JukeboxListener implements GameEventListener {
+//
+//        private final PositionSource listenerSource;
+//        private final int listenerRadius;
+//
+//        public JukeboxListener(final PositionSource positionsource, final int i) {
+//            this.listenerSource = positionsource;
+//            this.listenerRadius = i;
+//        }
+//
+//        @Override
+//        public PositionSource getListenerSource() {
+//            return this.listenerSource;
+//        }
+//
+//        @Override
+//        public int getListenerRadius() {
+//            return this.listenerRadius;
+//        }
+//
+//        // Cartridge start - disable unwanted allay logic
+//        /*@Override
+//        public boolean handleGameEvent(ServerLevel world, Holder<GameEvent> event, GameEvent.Context emitter, Vec3 emitterPos) {
+//            if (event.is((Holder) GameEvent.JUKEBOX_PLAY)) {
+//                Allay.this.setJukeboxPlaying(BlockPos.containing(emitterPos), true);
+//                return true;
+//            } else if (event.is((Holder) GameEvent.JUKEBOX_STOP_PLAY)) {
+//                Allay.this.setJukeboxPlaying(BlockPos.containing(emitterPos), false);
+//                return true;
+//            } else {
+//                return false;
+//            }
+//        }*/
+//        // Cartridge end - disable unwanted allay logic
+//    }
 }
