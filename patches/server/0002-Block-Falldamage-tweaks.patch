From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boy <sivertpaulsen2@gmail.com>
Date: Sat, 15 Jun 2024 01:36:28 +0200
Subject: [PATCH] Block & Falldamage tweaks


diff --git a/src/main/java/net/minecraft/data/tags/VanillaBlockTagsProvider.java b/src/main/java/net/minecraft/data/tags/VanillaBlockTagsProvider.java
index 118083ab8648ecc620c92a473044a42dfaeb0021..cb59947cc29f7943010977631a47f4cf9fb28de2 100644
--- a/src/main/java/net/minecraft/data/tags/VanillaBlockTagsProvider.java
+++ b/src/main/java/net/minecraft/data/tags/VanillaBlockTagsProvider.java
@@ -747,7 +747,7 @@ public class VanillaBlockTagsProvider extends IntrinsicHolderTagsProvider<Block>
                 Blocks.CAVE_VINES,
                 Blocks.CAVE_VINES_PLANT
             );
-        this.tag(BlockTags.FALL_DAMAGE_RESETTING).addTag(BlockTags.CLIMBABLE).add(Blocks.SWEET_BERRY_BUSH, Blocks.COBWEB);
+        this.tag(BlockTags.FALL_DAMAGE_RESETTING);
         this.tag(BlockTags.PIGLIN_REPELLENTS)
             .add(Blocks.SOUL_FIRE)
             .add(Blocks.SOUL_TORCH)
diff --git a/src/main/java/net/minecraft/network/protocol/common/ClientboundUpdateTagsPacket.java b/src/main/java/net/minecraft/network/protocol/common/ClientboundUpdateTagsPacket.java
index 0e0c9a54df98413b0ad4d195dd5ba21132cf4065..027d4e5dffb0d7f085b9a7792ad61b90cb37d5c2 100644
--- a/src/main/java/net/minecraft/network/protocol/common/ClientboundUpdateTagsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/common/ClientboundUpdateTagsPacket.java
@@ -1,13 +1,27 @@
 package net.minecraft.network.protocol.common;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
+import java.util.Optional;
+
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
 import net.minecraft.core.Registry;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketType;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.TagNetworkSerialization;
+import net.minecraft.world.level.block.Block;
+import org.jetbrains.annotations.Nullable;
 
 public class ClientboundUpdateTagsPacket implements Packet<ClientCommonPacketListener> {
     public static final StreamCodec<FriendlyByteBuf, ClientboundUpdateTagsPacket> STREAM_CODEC = Packet.codec(
@@ -37,6 +51,26 @@ public class ClientboundUpdateTagsPacket implements Packet<ClientCommonPacketLis
         listener.handleUpdateTags(this);
     }
 
+    // Cartridge start
+    @Override
+    public void onPacketDispatch(@Nullable ServerPlayer player) {
+        // if null aka not play-phase return
+        if (player == null) {
+            return;
+        }
+        Map<ResourceLocation, IntList> regTags = Optional.ofNullable(tags.get(BuiltInRegistries.BLOCK.key())).map(n -> n.tags).orElse(null);
+        // If the packet does not contain the block-registry, return as tag was not modified
+        if (regTags == null) {
+            return;
+        }
+        IntList climbableIds = regTags.get(BlockTags.CLIMBABLE.location());
+        // If climbable is not in the packet, return
+        if (climbableIds == null) return;
+        // Set the client-side climbable state based on packet
+        player.hasClientSideClimbable = !climbableIds.isEmpty();
+    }
+    // Cartridge end
+
     public Map<ResourceKey<? extends Registry<?>>, TagNetworkSerialization.NetworkPayload> getTags() {
         return this.tags;
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 9d1e68c09fa7093cf0f6fa636f90cb15a44cbb38..dd9170d0cc162521545a94847df91abf030ff878 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -332,6 +332,10 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
     }
     // Paper end - rewrite chunk system
 
+    // Cartridge start
+    public boolean hasClientSideClimbable = true;
+    // Cartridge end
+
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
         this.chatVisibility = ChatVisiblity.FULL;
@@ -1647,7 +1651,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
                 this.spawnExtraParticlesOnFall = false;
             }
 
-            super.checkFallDamage(yDifference, onGround, iblockdata, blockposition);
+            super.checkFallDamage(yDifference, onGround || hasLandedInLiquid(), iblockdata, blockposition);
         }
     }
 
@@ -1656,7 +1660,8 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         super.onExplosionHit(entity);
         this.currentImpulseImpactPos = this.position();
         this.currentExplosionCause = entity;
-        this.setIgnoreFallDamageFromCurrentImpulse(entity != null && entity.getType() == EntityType.WIND_CHARGE);
+        //this.setIgnoreFallDamageFromCurrentImpulse(entity != null && entity.getType() == EntityType.WIND_CHARGE); // Cartridge
+        this.setIgnoreFallDamageFromCurrentImpulse(false); // Cartridge
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 7796e191747be545e744564a2b0b65790f69114d..3bb8e524c0bca2f8082f4a364d079360060787ae 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network;
 
+import com.destroystokyo.paper.utils.PaperPluginLogger;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Floats;
 import com.mojang.authlib.GameProfile;
@@ -7,6 +8,7 @@ import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.adventure.providers.ComponentLoggerProviderImpl;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -135,6 +137,7 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.stats.ServerRecipeBook;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.util.FutureChain;
 import net.minecraft.util.Mth;
 import net.minecraft.util.SignatureValidator;
@@ -582,9 +585,13 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 if (entity instanceof LivingEntity) {
                     LivingEntity entityliving = (LivingEntity) entity;
 
-                    if (entityliving.onClimbable()) {
-                        entityliving.resetFallDistance();
+                    // Cartridge start
+                    if (entityliving.getInBlockState().is(BlockTags.CLIMBABLE)) {
+                        // If on climbable and the last climbable is not empty, they are currently climbing
+                        // If it is not present, they landed on the ladder, and we want to retain their falldistance
+                        if (entityliving.getLastClimbablePos().isPresent()) entityliving.resetFallDistance();
                     }
+                    // Cartridge end
                 }
 
                 entity.move(MoverType.PLAYER, new Vec3(d6, d7, d8));
@@ -685,6 +692,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                 this.vehicleLastGoodX = entity.getX();
                 this.vehicleLastGoodY = entity.getY();
                 this.vehicleLastGoodZ = entity.getZ();
+                this.player.fallDistance = entity.fallDistance; // Cartridge
             }
 
         }
@@ -1470,7 +1478,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
                             if (teleportBack) {
                             // Paper end - Add fail move event
                                 this.internalTeleport(d3, d4, d5, f, f1, Collections.emptySet()); // CraftBukkit - SPIGOT-1807: Don't call teleport event, when the client thinks the player is falling, because the chunks are not loaded on the client yet.
-                                this.player.doCheckFallDamage(this.player.getX() - d3, this.player.getY() - d4, this.player.getZ() - d5, packet.isOnGround());
+                                this.player.doCheckFallDamage(this.player.getX() - d3, this.player.getY() - d4, this.player.getZ() - d5, packet.isOnGround() || this.player.isInWater()); // Cartridge - Make water not negate falldamage
                             } else {
                                 // CraftBukkit start - fire PlayerMoveEvent
                                 // Reset to old location first
diff --git a/src/main/java/net/minecraft/tags/TagNetworkSerialization.java b/src/main/java/net/minecraft/tags/TagNetworkSerialization.java
index b6c1c9d6bef3dd234c9bddb628ac6620ad12b854..d4a8b1986cbd5191b9b3a8813278c9ff01df82f9 100644
--- a/src/main/java/net/minecraft/tags/TagNetworkSerialization.java
+++ b/src/main/java/net/minecraft/tags/TagNetworkSerialization.java
@@ -47,7 +47,7 @@ public class TagNetworkSerialization {
         return new TagNetworkSerialization.NetworkPayload(map);
     }
 
-    static <T> void deserializeTagsFromNetwork(
+    public static <T> void deserializeTagsFromNetwork(
         ResourceKey<? extends Registry<T>> registryKey,
         Registry<T> registry,
         TagNetworkSerialization.NetworkPayload serialized,
@@ -61,7 +61,7 @@ public class TagNetworkSerialization {
     }
 
     public static final class NetworkPayload {
-        final Map<ResourceLocation, IntList> tags;
+        public final Map<ResourceLocation, IntList> tags;
 
         NetworkPayload(Map<ResourceLocation, IntList> contents) {
             this.tags = contents;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 83f3ffdd8fa901b3de580d2359cdb5ead0d762cb..e3b171c9cefb21f7efd004e5cf93cce2df7e338c 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -43,6 +43,7 @@ import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.FloatTag;
@@ -83,6 +84,7 @@ import net.minecraft.world.InteractionResult;
 import net.minecraft.world.Nameable;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
+import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.Projectile;
@@ -1104,7 +1106,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     BlockHitResult movingobjectpositionblock = this.level().clip(new ClipContext(this.position(), this.position().add(vec3d1), ClipContext.Block.FALLDAMAGE_RESETTING, ClipContext.Fluid.WATER, this));
 
                     if (movingobjectpositionblock.getType() != HitResult.Type.MISS) {
-                        this.resetFallDistance();
+                        //this.resetFallDistance(); // Cartridge - Make water not negate falldamage
                     }
                 }
 
@@ -1761,7 +1763,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 }
             }
 
-            return false;
+            return true; // Cartridge
         }
     }
 
@@ -1832,7 +1834,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 this.doWaterSplashEffect();
             }
 
-            this.resetFallDistance();
+            //this.resetFallDistance(); // Cartridge - Make water not negate falldamage
             this.wasTouchingWater = true;
             this.clearFire();
         } else {
@@ -2910,9 +2912,12 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         }
     }
 
+    // Cartridge start - Prevent entering vehicle when falling
     protected boolean canRide(Entity entity) {
-        return !this.isShiftKeyDown() && this.boardingCooldown <= 0;
+        boolean isSafeFallDistance = (!(this instanceof net.minecraft.world.entity.LivingEntity livingEntity) || this.fallDistance < livingEntity.getAttributeValue(Attributes.SAFE_FALL_DISTANCE));
+        return isSafeFallDistance && !this.isShiftKeyDown() && this.boardingCooldown <= 0;
     }
+    // Cartridge end - Prevent entering vehicle when falling
 
     public void ejectPassengers() {
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
@@ -3464,7 +3469,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void makeStuckInBlock(BlockState state, Vec3 multiplier) {
-        this.resetFallDistance();
+        //this.resetFallDistance(); // Cartridge
         this.stuckSpeedMultiplier = multiplier;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 909accac7538e1c0c0c51deb2ee0605697c059d0..9abb71376207c6adad02a5e5748bbd6a77787981 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1,12 +1,9 @@
 package net.minecraft.world.entity;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Function;
 import com.google.common.base.Objects;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+import com.google.common.collect.*;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
@@ -14,17 +11,6 @@ import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.doubles.DoubleDoubleImmutablePair;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
-import java.util.Collection;
-import java.util.ConcurrentModificationException;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Optional;
-import java.util.Set;
-import java.util.function.Predicate;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
@@ -38,19 +24,8 @@ import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.FloatTag;
-import net.minecraft.nbt.IntTag;
-import net.minecraft.nbt.ListTag;
-import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.Tag;
-import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
-import net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket;
-import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
+import net.minecraft.nbt.*;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
@@ -63,12 +38,7 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
-import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.DamageTypeTags;
-import net.minecraft.tags.EntityTypeTags;
-import net.minecraft.tags.FluidTags;
-import net.minecraft.tags.ItemTags;
-import net.minecraft.tags.TagKey;
+import net.minecraft.tags.*;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
@@ -81,13 +51,7 @@ import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffectUtil;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.ai.Brain;
-import net.minecraft.world.entity.ai.attributes.Attribute;
-import net.minecraft.world.entity.ai.attributes.AttributeInstance;
-import net.minecraft.world.entity.ai.attributes.AttributeMap;
-import net.minecraft.world.entity.ai.attributes.AttributeModifier;
-import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
-import net.minecraft.world.entity.ai.attributes.Attributes;
-import net.minecraft.world.entity.ai.attributes.DefaultAttributes;
+import net.minecraft.world.entity.ai.attributes.*;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.FlyingAnimal;
 import net.minecraft.world.entity.animal.Wolf;
@@ -96,27 +60,14 @@ import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.projectile.Projectile;
 import net.minecraft.world.food.FoodProperties;
-import net.minecraft.world.item.ArmorItem;
-import net.minecraft.world.item.AxeItem;
-import net.minecraft.world.item.ElytraItem;
-import net.minecraft.world.item.Equipable;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
-import net.minecraft.world.item.UseAnim;
+import net.minecraft.world.item.*;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.effects.EnchantmentLocationBasedEffect;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.BedBlock;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.HoneyBlock;
-import net.minecraft.world.level.block.LadderBlock;
-import net.minecraft.world.level.block.PowderSnowBlock;
-import net.minecraft.world.level.block.SoundType;
-import net.minecraft.world.level.block.TrapDoorBlock;
+import net.minecraft.world.level.block.*;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -132,32 +83,21 @@ import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Set;
-import com.google.common.base.Function;
-import java.util.UUID;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.Player;
-import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
-import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.*;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
-import org.bukkit.event.entity.EntityKnockbackEvent;
-import org.bukkit.event.entity.EntityPotionEffectEvent;
-import org.bukkit.event.entity.EntityRegainHealthEvent;
-import org.bukkit.event.entity.EntityRemoveEvent;
-import org.bukkit.event.entity.EntityResurrectEvent;
-import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
-// CraftBukkit end
+import org.slf4j.Logger;
 
-import co.aikar.timings.MinecraftTimings; // Paper
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.function.Predicate;
 
 public abstract class LivingEntity extends Entity implements Attackable {
 
@@ -373,7 +313,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         Level world = this.level();
 
         if (world instanceof ServerLevel worldserver) {
-            if (onGround && this.fallDistance > 0.0F) {
+            if ((onGround || isInWater()) && this.fallDistance > 0.0F) { // Cartridge - Make water not negate falldamage
                 this.onChangedBlock(worldserver, landedPosition);
                 double d1 = this.getAttributeValue(Attributes.SAFE_FALL_DISTANCE);
 
@@ -407,10 +347,18 @@ public abstract class LivingEntity extends Entity implements Attackable {
             }
         }
 
-        super.checkFallDamage(heightDifference, onGround, state, landedPosition);
+        // Cartridge start
+        boolean onSurface = onGround;
+        boolean silentOnClimbable = this.getInBlockState().is(BlockTags.CLIMBABLE) && getLastClimbablePos().isPresent();
+        if (!onSurface) onSurface = hasLandedInLiquid();
+        if (!onSurface) onSurface = silentOnClimbable && getLastClimbablePos().isEmpty();
+
+        super.checkFallDamage(heightDifference, onSurface, state, landedPosition);
+
         if (onGround) {
             this.lastClimbablePos = Optional.empty();
         }
+        // Cartridge end
 
     }
 
@@ -2062,11 +2010,16 @@ public abstract class LivingEntity extends Entity implements Attackable {
     // CraftBukkit end
 
     public Optional<BlockPos> getLastClimbablePos() {
+        if (this instanceof ServerPlayer serverPlayer && !serverPlayer.hasClientSideClimbable) { // Cartridge
+            this.lastClimbablePos = Optional.empty();
+        }
         return this.lastClimbablePos;
     }
 
     public boolean onClimbable() {
-        if (this.isSpectator()) {
+        if (this instanceof ServerPlayer serverPlayer && !serverPlayer.hasClientSideClimbable) { // Cartridge
+            return false;
+        } else if (this.isSpectator()) {
             return false;
         } else {
             BlockPos blockposition = this.blockPosition();
@@ -3508,7 +3461,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         Vec3 vec3d1 = new Vec3((double) this.xxa, (double) this.yya, (double) this.zza);
 
         if (this.hasEffect(MobEffects.SLOW_FALLING) || this.hasEffect(MobEffects.LEVITATION)) {
-            this.resetFallDistance();
+            //this.resetFallDistance(); // Cartridge
         }
 
         label104:
@@ -3726,7 +3679,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         super.rideTick();
         this.oRun = this.run;
         this.run = 0.0F;
-        this.resetFallDistance();
+        //this.resetFallDistance(); // Cartridge
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
index 1aa5e57a4e6a4be60514d8808a2e6c973d93e798..7ef4a753d6d2716d6b4754d0f9932e35e33fa8f1 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
@@ -68,6 +68,7 @@ public class ThrownEnderpearl extends ThrowableItemProjectile {
 
                     if (entity instanceof ServerPlayer) {
                         ServerPlayer entityplayer = (ServerPlayer) entity;
+                        double originalY = entity.getY();
 
                         if (entityplayer.connection.isAcceptingMessages()) {
                             // CraftBukkit start
@@ -86,15 +87,18 @@ public class ThrownEnderpearl extends ThrowableItemProjectile {
                                 }
                             }
 
-                            // entity.changeDimension(new DimensionTransition(worldserver, this.position(), entity.getDeltaMovement(), entity.getYRot(), entity.getXRot(), DimensionTransition.DO_NOTHING)); // CraftBukkit - moved up
-                            entity.resetFallDistance();
                             entityplayer.resetCurrentImpulseContext();
-                            entity.hurt(this.damageSources().fall().customEventDamager(this), 5.0F); // CraftBukkit // Paper - fix DamageSource API
+                            // Cartridge start - Make Ender Pearls increase fall-damage
+                            // entity.changeDimension(new DimensionTransition(worldserver, this.position(), entity.getDeltaMovement(), entity.getYRot(), entity.getXRot(), DimensionTransition.DO_NOTHING)); // CraftBukkit - moved up
+                            //entity.resetFallDistance();
+                            entityplayer.fallDistance += Math.max((float) (originalY - this.getY()), 0f);
+                            entityplayer.causeFallDamage(entityplayer.fallDistance, 1.0f, this.damageSources().fall().customEventDamager(this));
+                            // Cartridge end
                             this.playSound(worldserver, this.position());
                         }
                     } else {
                         entity.changeDimension(new DimensionTransition(worldserver, this.position(), entity.getDeltaMovement(), entity.getYRot(), entity.getXRot(), DimensionTransition.DO_NOTHING));
-                        entity.resetFallDistance();
+                        //entity.resetFallDistance(); // Cartridge
                         this.playSound(worldserver, this.position());
                     }
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index f1955afc8e367f80ead85bd5ad3b8d66c255565a..5ed320e42963dc6d87d701b0e8b02936f504440a 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -913,7 +913,7 @@ public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat
             if (onGround) {
                 if (this.fallDistance > 3.0F) {
                     if (this.status != Boat.Status.ON_LAND) {
-                        this.resetFallDistance();
+                        //this.resetFallDistance(); // Cartridge
                         return;
                     }
 
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index 9f59f63203807abc3802d3e2f060d90d0d754860..f0d1b05b176b4b799455ab5edfb4964fb39712b8 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -59,7 +59,8 @@ public class ChorusFruitItem extends Item {
                     }
 
                     world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), soundeffect, soundcategory);
-                    user.resetFallDistance();
+                    //user.resetFallDistance(); // Cartridge
+                    user.fallDistance += (float) (vec3d.y - user.getY()); // Cartridge
                     break;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/item/MaceItem.java b/src/main/java/net/minecraft/world/item/MaceItem.java
index e07d6f5589f5eaa95d9009b1b0af71c879b2dddb..8db60a614035ea4512b7d7537662de8e0b663f9a 100644
--- a/src/main/java/net/minecraft/world/item/MaceItem.java
+++ b/src/main/java/net/minecraft/world/item/MaceItem.java
@@ -75,9 +75,11 @@ public class MaceItem extends Item {
                 serverPlayer.currentImpulseImpactPos = serverPlayer.position();
             }
 
-            serverPlayer.setIgnoreFallDamageFromCurrentImpulse(true);
-            serverPlayer.setDeltaMovement(serverPlayer.getDeltaMovement().with(Direction.Axis.Y, 0.01F));
-            serverPlayer.connection.send(new ClientboundSetEntityMotionPacket(serverPlayer));
+            // Cartridge start - prevent mace from resetting fall-distance
+            serverPlayer.setIgnoreFallDamageFromCurrentImpulse(false);
+            //serverPlayer.setDeltaMovement(serverPlayer.getDeltaMovement().with(Direction.Axis.Y, 0.01F));
+            //serverPlayer.connection.send(new ClientboundSetEntityMotionPacket(serverPlayer));
+            // Cartridge end - prevent mace from resetting fall-distance
             if (target.onGround()) {
                 serverPlayer.setSpawnExtraParticlesOnFall(true);
                 SoundEvent soundEvent = serverPlayer.fallDistance > 5.0F ? SoundEvents.MACE_SMASH_GROUND_HEAVY : SoundEvents.MACE_SMASH_GROUND;
@@ -100,7 +102,8 @@ public class MaceItem extends Item {
     public void postHurtEnemy(ItemStack stack, LivingEntity target, LivingEntity attacker) {
         stack.hurtAndBreak(1, attacker, EquipmentSlot.MAINHAND);
         if (canSmashAttack(attacker)) {
-            attacker.resetFallDistance();
+            canSmashAttack(attacker);
+            //attacker.resetFallDistance(); // Cartridge
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/ClipContext.java b/src/main/java/net/minecraft/world/level/ClipContext.java
index 3fa2964b979053ecbefc946c7fe76828de86d8f1..6d2bd16ae4ddafa35d30d52f376b3401fd3e23da 100644
--- a/src/main/java/net/minecraft/world/level/ClipContext.java
+++ b/src/main/java/net/minecraft/world/level/ClipContext.java
@@ -52,7 +52,7 @@ public class ClipContext {
     public static enum Block implements ClipContext.ShapeGetter {
 
         COLLIDER(BlockBehaviour.BlockStateBase::getCollisionShape), OUTLINE(BlockBehaviour.BlockStateBase::getShape), VISUAL(BlockBehaviour.BlockStateBase::getVisualShape), FALLDAMAGE_RESETTING((iblockdata, iblockaccess, blockposition, voxelshapecollision) -> {
-            return iblockdata.is(BlockTags.FALL_DAMAGE_RESETTING) ? Shapes.block() : Shapes.empty();
+            return Shapes.empty();
         });
 
         private final ClipContext.ShapeGetter shapeGetter;
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index 85d598c3354ee62f0fd1b26e485e0084967c0380..eaf2925b7a50aac7cb82298ce8a422891187cda5 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -165,7 +165,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     // CraftBukkit end
 
     public static boolean canSetSpawn(Level world) {
-        return world.dimensionType().bedWorks(); // Paper - actually check if the bed works
+        return false; // Cartridge
     }
 
     private boolean kickVillagerOutOfBed(Level world, BlockPos pos) {
@@ -181,7 +181,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        super.fallOn(world, state, pos, entity, fallDistance * 0.5F);
+        super.fallOn(world, state, pos, entity, fallDistance); // Cartridge
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 81fe0dea8e6e23c4a78f07fc2f9c0d68cd683f11..241a5771f5efb49f2621cf222338b6cf45104b22 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -36,7 +36,8 @@ public class CoralBlock extends Block {
         return CoralBlock.CODEC;
     }
 
-    @Override
+    // Cartridge - Disable CoralBlocks from fading outside of water
+    /*@Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!this.scanForWater(world, pos)) {
             // CraftBukkit start
@@ -47,7 +48,7 @@ public class CoralBlock extends Block {
             world.setBlock(pos, this.deadBlock.defaultBlockState(), 2);
         }
 
-    }
+    }*/
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 7701683000132479d8c8eaa77ac3f93e41a960be..843191d784a953873e8cf5aec5cc25d8bc851502 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -37,7 +37,8 @@ public class CoralFanBlock extends BaseCoralFanBlock {
         this.tryScheduleDieTick(state, world, pos);
     }
 
-    @Override
+    // Cartridge - Disable CoralFanBlocks from fading outside of water
+    /*@Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
@@ -48,7 +49,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
             world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false), 2);
         }
 
-    }
+    }*/
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index 4c4aa2a63be84ff614a3dc0db2864266755545a2..28462b2ab64941ddbbac856251ca2bab0f82ae3d 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -42,7 +42,8 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
         this.tryScheduleDieTick(state, world, pos);
     }
 
-    @Override
+    // Cartridge - Disable CoralPlantBlocks from fading outside of water
+    /*@Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
@@ -53,7 +54,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
             world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false), 2);
         }
 
-    }
+    }*/
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index 924766117fcdf7285327e9aa1f89a630987855a8..e8376cb0ec2b79e7c94a11089ef1739def53165b 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -37,18 +37,19 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
         this.tryScheduleDieTick(state, world, pos);
     }
 
-    @Override
-    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (!scanForWater(state, world, pos)) {
-            // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
-                return;
-            }
-            // CraftBukkit end
-            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
-        }
-
-    }
+    // Cartridge - Disable CoralWallFanBlocks from fading outside of water
+//    @Override
+//    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+//        if (!scanForWater(state, world, pos)) {
+//            // CraftBukkit start
+//            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
+//                return;
+//            }
+//            // CraftBukkit end
+//            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
+//        }
+//
+//    }
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index d59e33e7326489c6d55d316d0130f22235f4c63c..1f4bae79a8f92cf0c55c5d60336778974dd679dd 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -108,7 +108,8 @@ public class FarmBlock extends Block {
 
     }
 
-    @Override
+    // Cartridge - Disable jumping on farmland converting to dirt
+    /*@Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
         super.fallOn(world, state, pos, entity, fallDistance); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
         if (!world.isClientSide && world.random.nextFloat() < fallDistance - 0.5F && entity instanceof LivingEntity && (entity instanceof Player || world.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) && entity.getBbWidth() * entity.getBbWidth() * entity.getBbHeight() > 0.512F) {
@@ -133,7 +134,7 @@ public class FarmBlock extends Block {
         }
 
         // super.fallOn(world, iblockdata, blockposition, entity, f); // CraftBukkit - moved up
-    }
+    }*/
 
     public static void turnToDirt(@Nullable Entity entity, BlockState state, Level world, BlockPos pos) {
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/HayBlock.java b/src/main/java/net/minecraft/world/level/block/HayBlock.java
index ef364aa171a48482a45bc18cfe730ec20c3f7be6..0aaff453eb36630472e6aff932b1cdaa59f566c3 100644
--- a/src/main/java/net/minecraft/world/level/block/HayBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HayBlock.java
@@ -23,6 +23,6 @@ public class HayBlock extends RotatedPillarBlock {
 
     @Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        entity.causeFallDamage(fallDistance, 0.2F, world.damageSources().fall());
+        entity.causeFallDamage(fallDistance, 1.0F, world.damageSources().fall()); // Cartridge
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/HoneyBlock.java b/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
index c6f7815b5fad3aad4635208aa2e5c6739e13cb45..403113eaa08963d764e71c08762b88c52c25de50 100644
--- a/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
@@ -53,7 +53,7 @@ public class HoneyBlock extends HalfTransparentBlock {
             world.broadcastEntityEvent(entity, (byte)54);
         }
 
-        if (entity.causeFallDamage(fallDistance, 0.2F, world.damageSources().fall())) {
+        if (entity.causeFallDamage(fallDistance, 1.0F, world.damageSources().fall())) { // Cartridge
             entity.playSound(this.soundType.getFallSound(), this.soundType.getVolume() * 0.5F, this.soundType.getPitch() * 0.75F);
         }
     }
@@ -100,7 +100,7 @@ public class HoneyBlock extends HalfTransparentBlock {
             entity.setDeltaMovement(new Vec3(vec3.x, -0.05, vec3.z));
         }
 
-        entity.resetFallDistance();
+        //entity.resetFallDistance(); // Cartridge
     }
 
     private void maybeDoSlideEffects(Level world, Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index ac775afb265430ac202cfa3900a036d11a308b1e..b58b6b274d1b8798e999a46de5cc715cee1956d2 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -55,13 +55,14 @@ public class IceBlock extends HalfTransparentBlock {
 
     }
 
-    @Override
-    protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
-            this.melt(state, world, pos);
-        }
-
-    }
+    // Cartridge - prevent ice from melting
+//    @Override
+//    protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+//        if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
+//            this.melt(state, world, pos);
+//        }
+//
+//    }
 
     protected void melt(BlockState state, Level world, BlockPos pos) {
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index 1d82cfe7af0dc42f88901fb0c44896771fdf8a93..f3785ed6b32d5c820fef73cfc3a5facbc70c010a 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -66,32 +66,17 @@ public class NoteBlock extends Block {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return this.defaultBlockState(); // Paper - place without considering instrument
-        return this.setInstrument(ctx.getLevel(), ctx.getClickedPos(), this.defaultBlockState());
+        return this.defaultBlockState(); // Cartridge - place without considering instrument
     }
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return state; // Paper - prevent noteblock instrument from updating
-        boolean flag = direction.getAxis() == Direction.Axis.Y;
-
-        return flag ? this.setInstrument(world, pos, state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return state; // Cartridge
     }
 
     @Override
     protected void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return; // Paper - prevent noteblock powered-state from updating
-        boolean flag1 = world.hasNeighborSignal(pos);
-
-        if (flag1 != (Boolean) state.getValue(NoteBlock.POWERED)) {
-            if (flag1) {
-                this.playNote((Entity) null, state, world, pos);
-                state = world.getBlockState(pos); // CraftBukkit - SPIGOT-5617: update in case changed in event
-            }
-
-            world.setBlock(pos, (BlockState) state.setValue(NoteBlock.POWERED, flag1), 3);
-        }
-
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return; // Cartridge - prevent noteblock powered-state from updating
     }
 
     private void playNote(@Nullable Entity entity, BlockState state, Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
index fa9d3839b12e7f0485c91ae9a2f600314f41b893..a7033b3d563c42df339b78986c8d542b91c59fe4 100644
--- a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
@@ -27,7 +27,7 @@ public class SlimeBlock extends HalfTransparentBlock {
         if (entity.isSuppressingBounce()) {
             super.fallOn(world, state, pos, entity, fallDistance);
         } else {
-            entity.causeFallDamage(fallDistance, 0.0F, world.damageSources().fall());
+            entity.causeFallDamage(fallDistance, 1.0F, world.damageSources().fall()); // Cartridge
         }
     }
 
@@ -57,5 +57,6 @@ public class SlimeBlock extends HalfTransparentBlock {
         }
 
         super.stepOn(world, pos, state, entity);
+        super.stepOn(world, pos, state, entity);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 6008c634c408c4eed563815da4d57b2eef69835c..51b2c3512c7619ca1fc91368e3b4d8a455cdbba7 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -88,14 +88,15 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
         if (entity instanceof LivingEntity && entity.getType() != EntityType.FOX && entity.getType() != EntityType.BEE) {
             entity.makeStuckInBlock(state, new Vec3(0.800000011920929D, 0.75D, 0.800000011920929D));
-            if (!world.isClientSide && (Integer) state.getValue(SweetBerryBushBlock.AGE) > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
-                double d0 = Math.abs(entity.getX() - entity.xOld);
-                double d1 = Math.abs(entity.getZ() - entity.zOld);
-
-                if (d0 >= 0.003000000026077032D || d1 >= 0.003000000026077032D) {
-                    entity.hurt(world.damageSources().sweetBerryBush().directBlock(world, pos), 1.0F); // CraftBukkit
-                }
-            }
+            // Cartridge - Disable BerryBush from damaging entities
+//            if (!world.isClientSide && (Integer) state.getValue(SweetBerryBushBlock.AGE) > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
+//                double d0 = Math.abs(entity.getX() - entity.xOld);
+//                double d1 = Math.abs(entity.getZ() - entity.zOld);
+//
+//                if (d0 >= 0.003000000026077032D || d1 >= 0.003000000026077032D) {
+//                    entity.hurt(world.damageSources().sweetBerryBush().directBlock(world, pos), 1.0F); // CraftBukkit
+//                }
+//            }
 
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 6fe5be785423a35b6ff4e6206ca281b66845b979..8fd57e6228f876a0c81cd5f8e8ca89c83d55dfa4 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -67,96 +67,61 @@ public class TripWireBlock extends Block {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return this.defaultBlockState(); // Paper - place tripwire without updating
-        Level world = ctx.getLevel();
-        BlockPos blockposition = ctx.getClickedPos();
-
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireBlock.NORTH, this.shouldConnectTo(world.getBlockState(blockposition.north()), Direction.NORTH))).setValue(TripWireBlock.EAST, this.shouldConnectTo(world.getBlockState(blockposition.east()), Direction.EAST))).setValue(TripWireBlock.SOUTH, this.shouldConnectTo(world.getBlockState(blockposition.south()), Direction.SOUTH))).setValue(TripWireBlock.WEST, this.shouldConnectTo(world.getBlockState(blockposition.west()), Direction.WEST));
+        return this.defaultBlockState(); // Cartridge - place tripwire without updating
     }
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent tripwire from updating
-        return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return state; // Cartridge - prevent tripwire from updating
     }
 
+    // Cartridge
     @Override
     protected void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
-        if (!oldState.is(state.getBlock())) {
-            this.updateSource(world, pos, state);
-        }
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
+//        if (!oldState.is(state.getBlock())) {
+//            this.updateSource(world, pos, state);
+//        }
     }
 
+    // Cartridge
     @Override
     protected void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
-        if (!moved && !state.is(newState.getBlock())) {
-            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true));
-        }
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
+//        if (!moved && !state.is(newState.getBlock())) {
+//            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true));
+//        }
     }
 
     @Override
     public BlockState playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent disarming tripwires
-        if (!world.isClientSide && !player.getMainHandItem().isEmpty() && player.getMainHandItem().is(Items.SHEARS)) {
-            world.setBlock(pos, (BlockState) state.setValue(TripWireBlock.DISARMED, true), 4);
-            world.gameEvent((Entity) player, (Holder) GameEvent.SHEAR, pos);
-        }
-
-        return super.playerWillDestroy(world, pos, state, player);
+        return state; // Cartridge - prevent disarming tripwires
     }
 
     private void updateSource(Level world, BlockPos pos, BlockState state) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
-        Direction[] aenumdirection = new Direction[]{Direction.SOUTH, Direction.WEST};
-        int i = aenumdirection.length;
-        int j = 0;
-
-        while (j < i) {
-            Direction enumdirection = aenumdirection[j];
-            int k = 1;
-
-            while (true) {
-                if (k < 42) {
-                    BlockPos blockposition1 = pos.relative(enumdirection, k);
-                    BlockState iblockdata1 = world.getBlockState(blockposition1);
-
-                    if (iblockdata1.is(this.hook)) {
-                        if (iblockdata1.getValue(TripWireHookBlock.FACING) == enumdirection.getOpposite()) {
-                            TripWireHookBlock.calculateState(world, blockposition1, iblockdata1, false, true, k, state);
-                        }
-                    } else if (iblockdata1.is((Block) this)) {
-                        ++k;
-                        continue;
-                    }
-                }
-
-                ++j;
-                break;
-            }
-        }
-
-    }
-
-    @Override
-    protected void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwires from detecting collision
-        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
-        if (!world.isClientSide) {
-            if (!(Boolean) state.getValue(TripWireBlock.POWERED)) {
-                this.checkPressed(world, pos);
-            }
-        }
-    }
-
-    @Override
-    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
-        if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
-            this.checkPressed(world, pos);
-        }
-    }
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Cartridge - prevent adjacent tripwires from updating
+    }
+
+    // Cartridge - start
+//    @Override
+//    protected void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwires from detecting collision
+//        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
+//        if (!world.isClientSide) {
+//            if (!(Boolean) state.getValue(TripWireBlock.POWERED)) {
+//                this.checkPressed(world, pos);
+//            }
+//        }
+//    }
+
+//    @Override
+//    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
+//        if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
+//            this.checkPressed(world, pos);
+//        }
+//    }
+    // Cartridge - end
 
     private void checkPressed(Level world, BlockPos pos) {
         BlockState iblockdata = world.getBlockState(pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index a6f408e56fa6c9de82fd93555fe21e1b11ce1022..0c36cb6a2212180410e998522b5deecbbcdaeccc 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -66,14 +66,15 @@ public class TurtleEggBlock extends Block {
         super.stepOn(world, pos, state, entity);
     }
 
-    @Override
-    public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        if (!(entity instanceof Zombie)) {
-            this.destroyEgg(world, state, pos, entity, 3);
-        }
-
-        super.fallOn(world, state, pos, entity, fallDistance);
-    }
+    // Cartridge - Disable eggs from breaking
+//    @Override
+//    public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
+//        if (!(entity instanceof Zombie)) {
+//            this.destroyEgg(world, state, pos, entity, 3);
+//        }
+//
+//        super.fallOn(world, state, pos, entity, fallDistance);
+//    }
 
     private void destroyEgg(Level world, BlockState state, BlockPos pos, Entity entity, int inverseChance) {
         if (this.canDestroyEgg(world, entity)) {
@@ -82,6 +83,7 @@ public class TurtleEggBlock extends Block {
                 org.bukkit.event.Cancellable cancellable;
                 if (entity instanceof Player) {
                     cancellable = CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+                    return;
                 } else {
                     cancellable = new EntityInteractEvent(entity.getBukkitEntity(), CraftBlock.at(world, pos));
                     world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 1c0712295695727ee9c4d430d4157b8e17cbd71f..bd96726e26e0b7c59bcb8c7aa18239c56717de5f 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -469,38 +469,39 @@ public abstract class FlowingFluid extends Fluid {
         return this.getTickDelay(world);
     }
 
-    @Override
-    public void tick(Level world, BlockPos pos, FluidState state) {
-        if (!state.isSource()) {
-            FluidState fluid1 = this.getNewLiquid(world, pos, world.getBlockState(pos));
-            int i = this.getSpreadDelay(world, pos, state, fluid1);
-
-            if (fluid1.isEmpty()) {
-                state = fluid1;
-                // CraftBukkit start
-                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, Blocks.AIR.defaultBlockState());
-                if (event.isCancelled()) {
-                    return;
-                }
-                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 3);
-                // CraftBukkit end
-            } else if (!fluid1.equals(state)) {
-                state = fluid1;
-                BlockState iblockdata = fluid1.createLegacyBlock();
-                // CraftBukkit start
-                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, iblockdata);
-                if (event.isCancelled()) {
-                    return;
-                }
-                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 2);
-                // CraftBukkit end
-                world.scheduleTick(pos, fluid1.getType(), i);
-                world.updateNeighborsAt(pos, iblockdata.getBlock());
-            }
-        }
-
-        this.spread(world, pos, state);
-    }
+    // Cartridge - Disable liquid flow
+//    @Override
+//    public void tick(Level world, BlockPos pos, FluidState state) {
+//        if (!state.isSource()) {
+//            FluidState fluid1 = this.getNewLiquid(world, pos, world.getBlockState(pos));
+//            int i = this.getSpreadDelay(world, pos, state, fluid1);
+//
+//            if (fluid1.isEmpty()) {
+//                state = fluid1;
+//                // CraftBukkit start
+//                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, Blocks.AIR.defaultBlockState());
+//                if (event.isCancelled()) {
+//                    return;
+//                }
+//                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 3);
+//                // CraftBukkit end
+//            } else if (!fluid1.equals(state)) {
+//                state = fluid1;
+//                BlockState iblockdata = fluid1.createLegacyBlock();
+//                // CraftBukkit start
+//                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, iblockdata);
+//                if (event.isCancelled()) {
+//                    return;
+//                }
+//                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 2);
+//                // CraftBukkit end
+//                world.scheduleTick(pos, fluid1.getType(), i);
+//                world.updateNeighborsAt(pos, iblockdata.getBlock());
+//            }
+//        }
+//
+//        this.spread(world, pos, state);
+//    }
 
     protected static int getLegacyLevel(FluidState state) {
         return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + ((Boolean) state.getValue(FlowingFluid.FALLING) ? 8 : 0);
