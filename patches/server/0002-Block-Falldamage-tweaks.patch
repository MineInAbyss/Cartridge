From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boy <sivertpaulsen2@gmail.com>
Date: Sat, 15 Jun 2024 01:36:28 +0200
Subject: [PATCH] Block & Falldamage tweaks


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 14db8510af7465eb663501008ca35f8ec63bfe30..57c1b34fe7ca9581c68d6126c743d428cdf76f7a 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1729,7 +1729,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 }
             }
 
-            return false;
+            return true; // Cartridge
         }
     }
 
@@ -3444,7 +3444,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void makeStuckInBlock(BlockState state, Vec3 multiplier) {
-        this.resetFallDistance();
+        //this.resetFallDistance(); // Cartridge
         this.stuckSpeedMultiplier = multiplier;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 25a7dfddb44a11f6e20c459141a61270c0c12d4c..7ef00972dd8499b04c8a24d7e77fe0603bd0e3c0 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3453,7 +3453,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         Vec3 vec3d1 = new Vec3((double) this.xxa, (double) this.yya, (double) this.zza);
 
         if (this.hasEffect(MobEffects.SLOW_FALLING) || this.hasEffect(MobEffects.LEVITATION)) {
-            this.resetFallDistance();
+            //this.resetFallDistance(); // Cartridge
         }
 
         label104:
@@ -3671,7 +3671,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         super.rideTick();
         this.oRun = this.run;
         this.run = 0.0F;
-        this.resetFallDistance();
+        //this.resetFallDistance(); // Cartridge
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index 85d598c3354ee62f0fd1b26e485e0084967c0380..eaf2925b7a50aac7cb82298ce8a422891187cda5 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -165,7 +165,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     // CraftBukkit end
 
     public static boolean canSetSpawn(Level world) {
-        return world.dimensionType().bedWorks(); // Paper - actually check if the bed works
+        return false; // Cartridge
     }
 
     private boolean kickVillagerOutOfBed(Level world, BlockPos pos) {
@@ -181,7 +181,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        super.fallOn(world, state, pos, entity, fallDistance * 0.5F);
+        super.fallOn(world, state, pos, entity, fallDistance); // Cartridge
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 81fe0dea8e6e23c4a78f07fc2f9c0d68cd683f11..241a5771f5efb49f2621cf222338b6cf45104b22 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -36,7 +36,8 @@ public class CoralBlock extends Block {
         return CoralBlock.CODEC;
     }
 
-    @Override
+    // Cartridge - Disable CoralBlocks from fading outside of water
+    /*@Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!this.scanForWater(world, pos)) {
             // CraftBukkit start
@@ -47,7 +48,7 @@ public class CoralBlock extends Block {
             world.setBlock(pos, this.deadBlock.defaultBlockState(), 2);
         }
 
-    }
+    }*/
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 7701683000132479d8c8eaa77ac3f93e41a960be..843191d784a953873e8cf5aec5cc25d8bc851502 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -37,7 +37,8 @@ public class CoralFanBlock extends BaseCoralFanBlock {
         this.tryScheduleDieTick(state, world, pos);
     }
 
-    @Override
+    // Cartridge - Disable CoralFanBlocks from fading outside of water
+    /*@Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
@@ -48,7 +49,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
             world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false), 2);
         }
 
-    }
+    }*/
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index 4c4aa2a63be84ff614a3dc0db2864266755545a2..28462b2ab64941ddbbac856251ca2bab0f82ae3d 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -42,7 +42,8 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
         this.tryScheduleDieTick(state, world, pos);
     }
 
-    @Override
+    // Cartridge - Disable CoralPlantBlocks from fading outside of water
+    /*@Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
@@ -53,7 +54,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
             world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false), 2);
         }
 
-    }
+    }*/
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index 924766117fcdf7285327e9aa1f89a630987855a8..e8376cb0ec2b79e7c94a11089ef1739def53165b 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -37,18 +37,19 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
         this.tryScheduleDieTick(state, world, pos);
     }
 
-    @Override
-    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (!scanForWater(state, world, pos)) {
-            // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
-                return;
-            }
-            // CraftBukkit end
-            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
-        }
-
-    }
+    // Cartridge - Disable CoralWallFanBlocks from fading outside of water
+//    @Override
+//    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+//        if (!scanForWater(state, world, pos)) {
+//            // CraftBukkit start
+//            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
+//                return;
+//            }
+//            // CraftBukkit end
+//            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
+//        }
+//
+//    }
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index d59e33e7326489c6d55d316d0130f22235f4c63c..1f4bae79a8f92cf0c55c5d60336778974dd679dd 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -108,7 +108,8 @@ public class FarmBlock extends Block {
 
     }
 
-    @Override
+    // Cartridge - Disable jumping on farmland converting to dirt
+    /*@Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
         super.fallOn(world, state, pos, entity, fallDistance); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
         if (!world.isClientSide && world.random.nextFloat() < fallDistance - 0.5F && entity instanceof LivingEntity && (entity instanceof Player || world.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) && entity.getBbWidth() * entity.getBbWidth() * entity.getBbHeight() > 0.512F) {
@@ -133,7 +134,7 @@ public class FarmBlock extends Block {
         }
 
         // super.fallOn(world, iblockdata, blockposition, entity, f); // CraftBukkit - moved up
-    }
+    }*/
 
     public static void turnToDirt(@Nullable Entity entity, BlockState state, Level world, BlockPos pos) {
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/HayBlock.java b/src/main/java/net/minecraft/world/level/block/HayBlock.java
index ef364aa171a48482a45bc18cfe730ec20c3f7be6..0aaff453eb36630472e6aff932b1cdaa59f566c3 100644
--- a/src/main/java/net/minecraft/world/level/block/HayBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HayBlock.java
@@ -23,6 +23,6 @@ public class HayBlock extends RotatedPillarBlock {
 
     @Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        entity.causeFallDamage(fallDistance, 0.2F, world.damageSources().fall());
+        entity.causeFallDamage(fallDistance, 1.0F, world.damageSources().fall()); // Cartridge
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/HoneyBlock.java b/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
index c6f7815b5fad3aad4635208aa2e5c6739e13cb45..403113eaa08963d764e71c08762b88c52c25de50 100644
--- a/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HoneyBlock.java
@@ -53,7 +53,7 @@ public class HoneyBlock extends HalfTransparentBlock {
             world.broadcastEntityEvent(entity, (byte)54);
         }
 
-        if (entity.causeFallDamage(fallDistance, 0.2F, world.damageSources().fall())) {
+        if (entity.causeFallDamage(fallDistance, 1.0F, world.damageSources().fall())) { // Cartridge
             entity.playSound(this.soundType.getFallSound(), this.soundType.getVolume() * 0.5F, this.soundType.getPitch() * 0.75F);
         }
     }
@@ -100,7 +100,7 @@ public class HoneyBlock extends HalfTransparentBlock {
             entity.setDeltaMovement(new Vec3(vec3.x, -0.05, vec3.z));
         }
 
-        entity.resetFallDistance();
+        //entity.resetFallDistance(); // Cartridge
     }
 
     private void maybeDoSlideEffects(Level world, Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/block/IceBlock.java b/src/main/java/net/minecraft/world/level/block/IceBlock.java
index ac775afb265430ac202cfa3900a036d11a308b1e..b58b6b274d1b8798e999a46de5cc715cee1956d2 100644
--- a/src/main/java/net/minecraft/world/level/block/IceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/IceBlock.java
@@ -55,13 +55,14 @@ public class IceBlock extends HalfTransparentBlock {
 
     }
 
-    @Override
-    protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
-            this.melt(state, world, pos);
-        }
-
-    }
+    // Cartridge - prevent ice from melting
+//    @Override
+//    protected void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+//        if (world.getBrightness(LightLayer.BLOCK, pos) > 11 - state.getLightBlock(world, pos)) {
+//            this.melt(state, world, pos);
+//        }
+//
+//    }
 
     protected void melt(BlockState state, Level world, BlockPos pos) {
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index 1d82cfe7af0dc42f88901fb0c44896771fdf8a93..f3785ed6b32d5c820fef73cfc3a5facbc70c010a 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -66,32 +66,17 @@ public class NoteBlock extends Block {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return this.defaultBlockState(); // Paper - place without considering instrument
-        return this.setInstrument(ctx.getLevel(), ctx.getClickedPos(), this.defaultBlockState());
+        return this.defaultBlockState(); // Cartridge - place without considering instrument
     }
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return state; // Paper - prevent noteblock instrument from updating
-        boolean flag = direction.getAxis() == Direction.Axis.Y;
-
-        return flag ? this.setInstrument(world, pos, state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return state; // Cartridge
     }
 
     @Override
     protected void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return; // Paper - prevent noteblock powered-state from updating
-        boolean flag1 = world.hasNeighborSignal(pos);
-
-        if (flag1 != (Boolean) state.getValue(NoteBlock.POWERED)) {
-            if (flag1) {
-                this.playNote((Entity) null, state, world, pos);
-                state = world.getBlockState(pos); // CraftBukkit - SPIGOT-5617: update in case changed in event
-            }
-
-            world.setBlock(pos, (BlockState) state.setValue(NoteBlock.POWERED, flag1), 3);
-        }
-
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableNoteblockUpdates) return; // Cartridge - prevent noteblock powered-state from updating
     }
 
     private void playNote(@Nullable Entity entity, BlockState state, Level world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
index fa9d3839b12e7f0485c91ae9a2f600314f41b893..a7033b3d563c42df339b78986c8d542b91c59fe4 100644
--- a/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SlimeBlock.java
@@ -27,7 +27,7 @@ public class SlimeBlock extends HalfTransparentBlock {
         if (entity.isSuppressingBounce()) {
             super.fallOn(world, state, pos, entity, fallDistance);
         } else {
-            entity.causeFallDamage(fallDistance, 0.0F, world.damageSources().fall());
+            entity.causeFallDamage(fallDistance, 1.0F, world.damageSources().fall()); // Cartridge
         }
     }
 
@@ -57,5 +57,6 @@ public class SlimeBlock extends HalfTransparentBlock {
         }
 
         super.stepOn(world, pos, state, entity);
+        super.stepOn(world, pos, state, entity);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 6008c634c408c4eed563815da4d57b2eef69835c..51b2c3512c7619ca1fc91368e3b4d8a455cdbba7 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -88,14 +88,15 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
         if (entity instanceof LivingEntity && entity.getType() != EntityType.FOX && entity.getType() != EntityType.BEE) {
             entity.makeStuckInBlock(state, new Vec3(0.800000011920929D, 0.75D, 0.800000011920929D));
-            if (!world.isClientSide && (Integer) state.getValue(SweetBerryBushBlock.AGE) > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
-                double d0 = Math.abs(entity.getX() - entity.xOld);
-                double d1 = Math.abs(entity.getZ() - entity.zOld);
-
-                if (d0 >= 0.003000000026077032D || d1 >= 0.003000000026077032D) {
-                    entity.hurt(world.damageSources().sweetBerryBush().directBlock(world, pos), 1.0F); // CraftBukkit
-                }
-            }
+            // Cartridge - Disable BerryBush from damaging entities
+//            if (!world.isClientSide && (Integer) state.getValue(SweetBerryBushBlock.AGE) > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
+//                double d0 = Math.abs(entity.getX() - entity.xOld);
+//                double d1 = Math.abs(entity.getZ() - entity.zOld);
+//
+//                if (d0 >= 0.003000000026077032D || d1 >= 0.003000000026077032D) {
+//                    entity.hurt(world.damageSources().sweetBerryBush().directBlock(world, pos), 1.0F); // CraftBukkit
+//                }
+//            }
 
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 6fe5be785423a35b6ff4e6206ca281b66845b979..8fd57e6228f876a0c81cd5f8e8ca89c83d55dfa4 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -67,96 +67,61 @@ public class TripWireBlock extends Block {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return this.defaultBlockState(); // Paper - place tripwire without updating
-        Level world = ctx.getLevel();
-        BlockPos blockposition = ctx.getClickedPos();
-
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireBlock.NORTH, this.shouldConnectTo(world.getBlockState(blockposition.north()), Direction.NORTH))).setValue(TripWireBlock.EAST, this.shouldConnectTo(world.getBlockState(blockposition.east()), Direction.EAST))).setValue(TripWireBlock.SOUTH, this.shouldConnectTo(world.getBlockState(blockposition.south()), Direction.SOUTH))).setValue(TripWireBlock.WEST, this.shouldConnectTo(world.getBlockState(blockposition.west()), Direction.WEST));
+        return this.defaultBlockState(); // Cartridge - place tripwire without updating
     }
 
     @Override
     protected BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent tripwire from updating
-        return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return state; // Cartridge - prevent tripwire from updating
     }
 
+    // Cartridge
     @Override
     protected void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
-        if (!oldState.is(state.getBlock())) {
-            this.updateSource(world, pos, state);
-        }
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
+//        if (!oldState.is(state.getBlock())) {
+//            this.updateSource(world, pos, state);
+//        }
     }
 
+    // Cartridge
     @Override
     protected void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
-        if (!moved && !state.is(newState.getBlock())) {
-            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true));
-        }
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
+//        if (!moved && !state.is(newState.getBlock())) {
+//            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true));
+//        }
     }
 
     @Override
     public BlockState playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent disarming tripwires
-        if (!world.isClientSide && !player.getMainHandItem().isEmpty() && player.getMainHandItem().is(Items.SHEARS)) {
-            world.setBlock(pos, (BlockState) state.setValue(TripWireBlock.DISARMED, true), 4);
-            world.gameEvent((Entity) player, (Holder) GameEvent.SHEAR, pos);
-        }
-
-        return super.playerWillDestroy(world, pos, state, player);
+        return state; // Cartridge - prevent disarming tripwires
     }
 
     private void updateSource(Level world, BlockPos pos, BlockState state) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
-        Direction[] aenumdirection = new Direction[]{Direction.SOUTH, Direction.WEST};
-        int i = aenumdirection.length;
-        int j = 0;
-
-        while (j < i) {
-            Direction enumdirection = aenumdirection[j];
-            int k = 1;
-
-            while (true) {
-                if (k < 42) {
-                    BlockPos blockposition1 = pos.relative(enumdirection, k);
-                    BlockState iblockdata1 = world.getBlockState(blockposition1);
-
-                    if (iblockdata1.is(this.hook)) {
-                        if (iblockdata1.getValue(TripWireHookBlock.FACING) == enumdirection.getOpposite()) {
-                            TripWireHookBlock.calculateState(world, blockposition1, iblockdata1, false, true, k, state);
-                        }
-                    } else if (iblockdata1.is((Block) this)) {
-                        ++k;
-                        continue;
-                    }
-                }
-
-                ++j;
-                break;
-            }
-        }
-
-    }
-
-    @Override
-    protected void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwires from detecting collision
-        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
-        if (!world.isClientSide) {
-            if (!(Boolean) state.getValue(TripWireBlock.POWERED)) {
-                this.checkPressed(world, pos);
-            }
-        }
-    }
-
-    @Override
-    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
-        if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
-            this.checkPressed(world, pos);
-        }
-    }
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Cartridge - prevent adjacent tripwires from updating
+    }
+
+    // Cartridge - start
+//    @Override
+//    protected void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwires from detecting collision
+//        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
+//        if (!world.isClientSide) {
+//            if (!(Boolean) state.getValue(TripWireBlock.POWERED)) {
+//                this.checkPressed(world, pos);
+//            }
+//        }
+//    }
+
+//    @Override
+//    protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+//        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent tripwire pressed check
+//        if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
+//            this.checkPressed(world, pos);
+//        }
+//    }
+    // Cartridge - end
 
     private void checkPressed(Level world, BlockPos pos) {
         BlockState iblockdata = world.getBlockState(pos);
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index a6f408e56fa6c9de82fd93555fe21e1b11ce1022..0c36cb6a2212180410e998522b5deecbbcdaeccc 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -66,14 +66,15 @@ public class TurtleEggBlock extends Block {
         super.stepOn(world, pos, state, entity);
     }
 
-    @Override
-    public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        if (!(entity instanceof Zombie)) {
-            this.destroyEgg(world, state, pos, entity, 3);
-        }
-
-        super.fallOn(world, state, pos, entity, fallDistance);
-    }
+    // Cartridge - Disable eggs from breaking
+//    @Override
+//    public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
+//        if (!(entity instanceof Zombie)) {
+//            this.destroyEgg(world, state, pos, entity, 3);
+//        }
+//
+//        super.fallOn(world, state, pos, entity, fallDistance);
+//    }
 
     private void destroyEgg(Level world, BlockState state, BlockPos pos, Entity entity, int inverseChance) {
         if (this.canDestroyEgg(world, entity)) {
@@ -82,6 +83,7 @@ public class TurtleEggBlock extends Block {
                 org.bukkit.event.Cancellable cancellable;
                 if (entity instanceof Player) {
                     cancellable = CraftEventFactory.callPlayerInteractEvent((Player) entity, org.bukkit.event.block.Action.PHYSICAL, pos, null, null, null);
+                    return;
                 } else {
                     cancellable = new EntityInteractEvent(entity.getBukkitEntity(), CraftBlock.at(world, pos));
                     world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 1c0712295695727ee9c4d430d4157b8e17cbd71f..bd96726e26e0b7c59bcb8c7aa18239c56717de5f 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -469,38 +469,39 @@ public abstract class FlowingFluid extends Fluid {
         return this.getTickDelay(world);
     }
 
-    @Override
-    public void tick(Level world, BlockPos pos, FluidState state) {
-        if (!state.isSource()) {
-            FluidState fluid1 = this.getNewLiquid(world, pos, world.getBlockState(pos));
-            int i = this.getSpreadDelay(world, pos, state, fluid1);
-
-            if (fluid1.isEmpty()) {
-                state = fluid1;
-                // CraftBukkit start
-                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, Blocks.AIR.defaultBlockState());
-                if (event.isCancelled()) {
-                    return;
-                }
-                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 3);
-                // CraftBukkit end
-            } else if (!fluid1.equals(state)) {
-                state = fluid1;
-                BlockState iblockdata = fluid1.createLegacyBlock();
-                // CraftBukkit start
-                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, iblockdata);
-                if (event.isCancelled()) {
-                    return;
-                }
-                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 2);
-                // CraftBukkit end
-                world.scheduleTick(pos, fluid1.getType(), i);
-                world.updateNeighborsAt(pos, iblockdata.getBlock());
-            }
-        }
-
-        this.spread(world, pos, state);
-    }
+    // Cartridge - Disable liquid flow
+//    @Override
+//    public void tick(Level world, BlockPos pos, FluidState state) {
+//        if (!state.isSource()) {
+//            FluidState fluid1 = this.getNewLiquid(world, pos, world.getBlockState(pos));
+//            int i = this.getSpreadDelay(world, pos, state, fluid1);
+//
+//            if (fluid1.isEmpty()) {
+//                state = fluid1;
+//                // CraftBukkit start
+//                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, Blocks.AIR.defaultBlockState());
+//                if (event.isCancelled()) {
+//                    return;
+//                }
+//                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 3);
+//                // CraftBukkit end
+//            } else if (!fluid1.equals(state)) {
+//                state = fluid1;
+//                BlockState iblockdata = fluid1.createLegacyBlock();
+//                // CraftBukkit start
+//                FluidLevelChangeEvent event = CraftEventFactory.callFluidLevelChangeEvent(world, pos, iblockdata);
+//                if (event.isCancelled()) {
+//                    return;
+//                }
+//                world.setBlock(pos, ((CraftBlockData) event.getNewData()).getState(), 2);
+//                // CraftBukkit end
+//                world.scheduleTick(pos, fluid1.getType(), i);
+//                world.updateNeighborsAt(pos, iblockdata.getBlock());
+//            }
+//        }
+//
+//        this.spread(world, pos, state);
+//    }
 
     protected static int getLegacyLevel(FluidState state) {
         return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + ((Boolean) state.getValue(FlowingFluid.FALLING) ? 8 : 0);
